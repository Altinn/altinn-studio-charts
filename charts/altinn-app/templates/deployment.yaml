apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  labels:
    {{- include ".Chart.Name.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include ".Chart.Name.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if .Values.linkerd.enabled }}
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/skip-outbound-ports: 9092,10255,9093,443
      {{- end }}
      labels:
        {{- include ".Chart.Name.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include ".Chart.Name.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ required "image.tag not set" .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 1000
            runAsGroup: 3000
            allowPrivilegeEscalation: false
          ports:
            - containerPort: {{ .Values.image.containerPort }}
          env:
            {{- if not (hasKey .Values.environmentVariables .Values.environment) }}
              {{ fail "the chosen environment does not exist" }}
            {{- end }}
            {{- $environmentVariables := index $.Values.environmentVariables $.Values.environment }}
            {{- range $variable := $environmentVariables }}
            - name: {{ $variable.name }}
              {{- if $variable.value }}
              value: {{ $variable.value | quote }}
              {{- end }}
              {{- if $variable.valueFrom }}
              valueFrom:
                {{- if $variable.valueFrom.secretKeyRef}}
                secretKeyRef:
                  name: {{ $variable.valueFrom.secretKeyRef.name }}
                  key: {{ $variable.valueFrom.secretKeyRef.key }}
                {{- end }}
              {{- end }}
            {{- end }}
          readinessProbe:
            # an http probe
            httpGet:
              path: /health
              port: {{ .Values.service.internalPort }}

            initialDelaySeconds: 30
            failureThreshold: 3
            periodSeconds: 3
            timeoutSeconds: 1
          livenessProbe:
              # an http probe
              httpGet:
                path: /health
                port: {{ .Values.service.internalPort }}
              initialDelaySeconds: 3
              failureThreshold: 3
              periodSeconds: 10
              timeoutSeconds: 2
         {{- $resources := index $.Values.resources $.Values.environment }}
          resources:
            {{- toYaml $resources| nindent 12 }}
          {{- if .Values.volumeMounts}}
          volumeMounts:
            {{- range $mount := .Values.volumeMounts}}
            - name: {{ $mount.name }}
              mountPath: {{ $mount.mountPath }}
            {{- end }}
          {{- end }}
      {{- if .Values.volumes }}
      volumes:
      {{- range $volume := .Values.volumes }}
        - name: {{ $volume.name }}
          {{- if $volume.persistantVolumeClaim }}
          persistantVolumeClaim:
            claimName: {{ $volume.persistantVolumeClaim.claimName }}
          {{- end }}
          {{- if $volume.secret }}
          secret:
            secretName: {{ $volume.secret.secretName }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.image.imagePullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.imagePullSecret }}
      {{- end }}
